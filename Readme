Expo 의 버전은
49.?.? 이상 이라면 상관 없습니다
49 버전의 Expo 라면 충돌이 일어날 문제는 거의 없습니다.
실행은 expo 49 버전부터 npx expo start 로 변경 되었습니다.

!-- 절대 package.json, pacakge-lock.json, tsconfig.json, app.json, babel.config.js 는 이 프로젝트의 종속성을 관리 합니다. 절대 건들지 않습니다. --!
!-- 만약 실수로 건드렸다면 더 이상 작업하지 않고 바로 관리자에게 문의 합니다.  --!
--------------------------------------------------------------------------------------------------------------------------------

설치 하여야 하는 모듈 및 외부 라이브러리

1. axios -> 설치 완료
    axios는 실제 서버와 통신하기 위한 라이브러리 입니다.

2. Navigation -> 설치 완료
    @react-navigation/bottom-tabs
    @react-navigation/drawer
    @react-navigation/native
    react-native-gesture-handler
    react-native-reanimated
    react-native-safe-area-context
    react-native-screens
        Navigation는 스크린의 이동 및 스크린들의 스택 관리등을 해줍니다.

!-- 8월 30일자 라이브러리 추가 사항 --!

3. react-native-calendars -> 설치 완료
    일정 페이지의 캘린더를 구현하기 위한 외부 라이브러리 입니다.

4. @expo/react-native-read-more-text -> 설치 완료
    댓글 또는 게시글의 본문의 내용이 길다면 개발자가 지정한 만큼의 행을 미리 보여주고 그 이후는 더보기를 눌러서 전체 내용을 볼 수 있도록 하여 주는 외부 라이브러리 입니다.

------------------------------------------------------------------------------------------------------------------------------

Android 와 Ios의 UI통합을 위해 주로 사용될 React Native 내부 모듈

1. Platform.OS
    import { Platform } from 'react-native';
    
    따로 외부에서 설치할 필요없이 react-Native 내부에 존재하는 모듈 이므로 import 하여 바로 사용하면 됩니다.
    이 친구는 앱을 실행한 기기의 Platform 정보를 가져옵니다.
    이것을 이용하여 android 인지 ios 인지 구분할 수 있으며 이를 이용해
    떄로는 두 플랫폼간 다른 개발을 하거나
    서로 차이점이 존재하는 두 플랫폼의 디자인 가이드라인을 통일시 시킬 수 있습니다. 

--------------------------------------------------------------------------------------------------------------------------------

2. Dimensions
    import { Dimensions } from 'react-native';

    이 친구 또한 따로 외부에서 설치할 필요없이 React-Native 내부에서 존재하는 내부 모듈입니다.
    바로 import 하여 사용하면 됩니다.
    이 친구는 해당 기기의 해상도 정보를 가져 옵니다. 
    가로와 세로의 해상도 크기를 가져오며 이를 이용해 해당 기기의 해상도에 맞게 반응하는 반응형 디자인을 구축할 수 있습니다.


   
    import { View, Text, Dimensions, StyleSheet, Platform } from 'react-native';

    const ResponsivePage = () => {
  const [windowDimensions, setWindowDimensions] = useState(Dimensions.get('window'));

  useEffect(() => {
    const handleDimensionsChange = ({ window }) => {
      setWindowDimensions(window);
    };

    Dimensions.addEventListener('change', handleDimensionsChange);

    return () => {
      Dimensions.removeEventListener('change', handleDimensionsChange);
    };
  }, []);

  const { width, height } = windowDimensions;

  const textStyles = StyleSheet.create({
    text: {
      fontSize: Platform.OS === 'ios' ? 24 : 20,
      marginBottom: Platform.OS === 'ios' ? 15 : 10,
    },
  });

  이 예시 코드는 Dimensions와 Platform.OS를 사용하여 안드로이드와 IOS 간의 다른 디자인을 보여줄수 있다는 예시입니다.
  실행 시 해당 기기의 정보와 해상도의 정보를 가져옵니다. 
    이를 이용해 안드로이드 라면 폰트의 사이즈는 20 아래의 여백은 10을 
    IOS라면 폰트의 사이즈는 24 아래의 여백은 15를 주어 
    해당 기기의 해상도를 화면에 출력 해주는 예시입니다.
    위의 ResponsivePage 에서는 Dimensions가 관리되며 해당기기의 해상도를 가져오는 코드 입니다.
    useEffect 에서는 Dimensions의 상태에 대해서 관리되며 Dimensions에서 변경점이 생긴다면 (해상도의 변화) 이를 감지해 다시 리렌더링 합니다.

  --------------------------------------------------------------------------------------------------------------------------------

  3. 비밀번호 해싱화 라이브러리는 Crypto-JS를 사용합니다.
  3-1. 개인정보 암호화 라이브러리는 Expo-Crypto 또는 react-native-rsa 를 사용하여 RSA 알고리즘 방식으로 암호화 합니다.

  --------------------------------------------------------------------------------------------------------------------------------

  4. UI에 적용할 스타일 코드는 StyleSheet를 사용합니다.

  https://seemly-finch-18b.notion.site/RN-5594a6a47fe84ba294742367750b7a26?pvs=4

  왜 CSS 가 아닌 StyleSheet를 사용하는지 서술 하여 놓았습니다.

  --------------------------------------------------------------------------------------------------------------------------------

  5. Icons 는 React-Native 내부 라이브러리 인 React-Native-vector-icons를 사용합니다

  https://docs.expo.dev/guides/icons/

  -> expo의 내부 라이브러리 인 import Ionicons from '@expo/vector-icons/Ionicons' 도 존재함